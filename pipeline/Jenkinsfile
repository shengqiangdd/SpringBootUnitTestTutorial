pipeline {
    environment {
        IMAGE_NAME = 'unit-testing'                // Docker 镜像名称，一般和项目名称相同
        USER_NAME = 'sqdd'                // docker hub用户
        CONTAINER_NAME = 'unit-testing' //容器运行指定名称  跟postman_collection里请求url.host: unit-testing对应
        // 确保已经在 Jenkins 中创建了这些凭证，且凭证 ID 是正确的
        DOCKER_CREDENTIALS = 'docker-credentials'	// docker用户名密码凭证
        SONARQUBE_CREDENTIALS = 'sonar_jenkins'	// sonar user_token 凭证
    }

    agent any
    stages {
        // 从代码仓库拉取代码和用于流水线任务的 Jenkinsfile 和 Dockerfile
        stage('Pull code') {
            agent any
            steps {
                echo '1. Fetch code from Git'
                checkout scm
            }
        }

        // 执行单元测试及代码覆盖率分析，单元覆盖率要求为 70%，如果低于 70% 则构建失败
        stage('Unit Test') {
            agent {
                docker {
                    image 'maven:3-alpine' // 在流水线中启动 Maven
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                echo '2. Run unit test'
                sh '''
        			export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))
        			mvn -B org.jacoco:jacoco-maven-plugin:prepare-agent test
        		 '''
                jacoco(changeBuildStatus: true, maximumLineCoverage: "70")
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        // 使用 SonarQube 进行代码分析
        stage('Code analysis with SonarQube') {
        	  agent {
        		docker {
            		image 'maven:3.6-jdk-11' // 使用带有 JDK 的 Maven 镜像
            		args '-v /root/.m2:/root/.m2' // Maven 缓存持久化
        		}
    		  }
            steps {
               echo '3. Code analysis with SonarQube'
               withSonarQubeEnv('sonar') {
                   withCredentials([string(credentialsId: "${SONARQUBE_CREDENTIALS}", variable: 'SONAR_TOKEN')]) {
                       sh '''
                           mvn clean verify sonar:sonar \
                           -Dsonar.projectKey=Myproject \
                           -Dsonar.projectName=unitesting \
                           -Dsonar.host.url=http://192.168.6.140:9000 \
                           -Dsonar.login=${SONAR_TOKEN}
                       '''
                   }
               }
            }
        }

        // 构建代码
        stage('Build') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                echo '4. Make build package'
                sh 'mvn -B -DskipTests clean package'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        // 创建 Docker 镜像并推送到 Docker 服务器
        stage('Build Docker Image') {
            agent any
            steps {
                echo '5. Build Docker Image and then push to Docker server'
                echo '检查当前目录'
                sh 'ls -la' // 列出当前工作目录下的文件，确保有 Dockerfile
                script {
                	// 使用 Credentials Binding 插件绑定 Docker 凭证
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    	// 登录 Docker
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                        // 构建和推送 Docker 镜像
                        sh "docker build -f Dockerfile -t ${USER_NAME}/${IMAGE_NAME}:latest ."
                        sh "docker push ${USER_NAME}/${IMAGE_NAME}:latest"
                    }
                }
            }
        }

        // 在测试服务器的节点拉取应用的镜像，创建并启动容器
        stage('Deploy') {
            agent { label 'test001' }
            steps {
                echo '6. Pull Docker image and run container in test environment'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CREDENTIALS}") {
                        sh """
                        	    docker network create my-network || true
                            docker pull ${USER_NAME}/${IMAGE_NAME}:latest
                            docker stop ${CONTAINER_NAME} || true
                            docker rm ${CONTAINER_NAME} || true
                            docker run --name ${CONTAINER_NAME} --network my-network -p 9001:9001 -d ${USER_NAME}/${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }

        // 在测试服务器节点启动 Newman 容器并执行 BVT 测试
        stage('Build Verification Test') {
            agent { label 'test001' }
            steps {
                echo '7. Run Build Verification Test in test environment'
                echo '检查当前目录'
                sh 'ls -la'
                //sh 'export POSTMAN_COLLECTION = pipeline/postman_collection.json'
                //sh 'export POSTMAN_ENVIRONMENT = pipeline/postman_environment.json'
                script {
            			def PostmanCollectionPath = "pipeline/postman_collection.json" // 设置相对路径
            			echo "path: ${WORKSPACE}/${PostmanCollectionPath}"
            			sh """
                    		docker pull postman/newman
                    		docker run --rm --name newman --network my-network -v ${WORKSPACE}/${PostmanCollectionPath}:/tmp/collection.json:ro postman/newman run /tmp/collection.json -r cli
                		"""
            	 }
            }
        }
    }
}
